- hosts: localhost
  become: yes
  tasks:
    - name: Clone elbencho repository
      git:
        repo: 'https://github.com/breuner/elbencho.git'
        dest: /home/deploy/elbencho

    - name: Install Requirements 
      apt: 
        name: ['build-essential', 'debhelper', 'devscripts', 'fakeroot', 'git', 'libaio-dev', 'libboost-filesystem-dev', 'libboost-program-options-dev', 'libboost-thread-dev', 'libncurses-dev', 
'libnuma-dev', 'lintian'] 
        state: present

    - name: Build elbencho 
      command: make -j 4
      args:
        chdir: /home/deploy/elbencho 
        creates: /home/deploy/elbencho/bin/elbencho

    - name: Package elbencho 
      command: make deb
      args:
        chdir: /home/deploy/elbencho 
        creates: /home/deploy/elbencho/packaging/elbencho*.deb

    - name: Create client list
      lineinfile:
        path: /home/deploy/elbencho-clients.list
        create: true
        line: "{{ item }}"
      with_items: "{{ groups.clients }}"
 
    - name: Create script to start elbencho
      lineinfile:
        path: /home/deploy/elbencho-start.sh
        create: true
        line: "{{ item }}"
      with_items: 
        - "#!/usr/bin/env bash"
        - "elbencho --hostsfile /home/deploy/elbencho-clients.list -w -r --direct -b 4m --iodepth 4 -s 12g -t 48 /quobyte/elbencho/file{1..256} --livecsv /home/deploy/elbencho-result-$(date).csv --liveint 1000 --infloop"

- hosts: clients,localhost 
  become: yes
  tasks:
    - name: Deploy elbencho 
      copy:
       src: /home/deploy/elbencho/packaging/elbencho_2.2.6_amd64.deb
       dest: /tmp/elbencho.deb
       force: yes
    - name: Install elbencho 
      apt:
        deb: /tmp/elbencho.deb

- hosts: clients 
  become: yes
  tasks:
    - name: Start elbencho clients
      shell:
        cmd: elbencho --service 


- hosts: registryservices[0]
  vars_files:
    - /home/deploy/provisioning/vars/ansible-vars
  become: yes
  vars: 
    - my_volume: "elbencho"
    - my_tenant: "My Tenant"
  tasks:
    - name: Get Quobyte session 
      shell:
        cmd: qmgmt -u {{ api_service }} user login {{ admin_user }} {{ admin_password }} 
    - name: Test if volume {{ my_volume }} exists 
      shell:
        cmd: qmgmt -u {{ api_service }} volume list | grep "^{{ my_volume }} " | awk '{print $1}'
      register: my_volume_test

    - name: Create volume using policy rules
      shell:
        cmd: qmgmt -u {{ api_service }} volume create "{{ my_tenant }}"/"{{ my_volume }}" deploy deploy 
      when: my_volume not in my_volume_test.stdout 

